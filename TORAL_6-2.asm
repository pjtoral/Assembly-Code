;====================================================================
; Main.asm file generated by New Project wizard
;
; Created:   Mon Oct 17 2022
; Processor: 8086
; Compiler:  MASM32
;
; Before starting simulation set Internal Memory Size 
; in the 8086 model properties to 0x10000
;====================================================================
	
DATA SEGMENT
   PORTA EQU 0F0H;
   PORTB EQU 0F2H;
   PORTC EQU 0F4H;
   COM_REG EQU 0F6H;

DATA ENDS


CODE    SEGMENT PUBLIC 'CODE'
        ASSUME CS:CODE
	MOV AX, DATA
	MOV DS, AX
	
	ORG 0000H

	

 
START:
   MOV DX, COM_REG ; set the address 
   MOV AL, 10001001B
   OUT DX, AL ; send the command byte
   CALL INIT_LCD;

   
CHECK_DAVBL:
   
   MOV DX, PORTC
   IN  AL, DX
   TEST AL, 10H
   JZ CHECK_DAVBL
   IN AL, DX
   AND AL, 0FH
   PUSH AX
   CHECK_INPUT:
      CMP AL, 0CH 		; check if key pressed is * 
       JE PRNT_AST
      CMP AL, 0EH 		; check if key pressed is # 
      JE PRNT_OCTO
      CMP AL, 0DH 		; check if key pressed is 0 
      JE PRNT_0
      CMP AL, 00H 		; check if key pressed is 1 
      JE PRNT_1 		
      CMP AL, 01H 		; check if key pressed is 2 
      JE PRNT_2 	
      CMP AL, 02H 		; check if key pressed is 3  
      JE PRNT_3 	
      CMP AL, 04H 		; check if key pressed is 4 
      JE PRNT_4 	
      CMP AL, 05H 		; check if key pressed is 5  
      JE PRNT_5 	
      CMP AL, 06H 		; check if key pressed is 6 
      JE PRNT_6 	
      CMP AL, 08H 		; check if key pressed is 7 
      JE PRNT_7 	
      CMP AL, 09H 		; check if key pressed is 8 
      JE PRNT_8 	
      CMP AL, 0AH 		; check if key pressed is 9 
      JE PRNT_9 	
JMP CHECK_DAVBL

PRNT_AST:
   CALL CENTER
   MOV AL, '*'
   JMP PRINT_CHAR
PRNT_OCTO:
   CALL CENTER
   MOV AL, '#'
   JMP PRINT_CHAR
PRNT_0:
   CALL CENTER
   MOV AL, '0'
   JMP PRINT_CHAR
PRNT_1:
   CALL CENTER
   MOV AL, '1'
   JMP PRINT_CHAR
PRNT_2:
   CALL CENTER
   MOV AL, '2'
   JMP PRINT_CHAR
PRNT_3:
   CALL CENTER
   MOV AL, '3'
   JMP PRINT_CHAR
PRNT_4:
   CALL CENTER
   MOV AL, '4'
   JMP PRINT_CHAR
PRNT_5:	
   CALL CENTER
   MOV AL, '5'
   JMP PRINT_CHAR
PRNT_6:
   CALL CENTER
   MOV AL, '6'
   JMP PRINT_CHAR
PRNT_7: 	
   CALL CENTER
   MOV AL, '7'
   JMP PRINT_CHAR
PRNT_8:
   CALL CENTER
   MOV AL, '8'
   JMP PRINT_CHAR
PRNT_9:
   CALL CENTER
   MOV AL, '9'
   JMP PRINT_CHAR
   
   
PRINT_CHAR:
   CALL DATA_CTRL
   POP AX
   JMP CHECK_DAVBL
 
CENTER:
   MOV AL, 0CAH
   CALL INST_CTRL
 RET 
 
INST_CTRL:
   PUSH AX ; preserve value of AL
   MOV DX, PORTA ; set port of LCD data bus (PORTA)
   OUT DX, AL ; write data in AL to PORTA
   MOV DX, PORTB ; set port of LCD control lines (PORTB)
   MOV AL, 02H ; E=1, RS=0 (access instruction reg)
   OUT DX, AL ; write data in AL to PORTB
   CALL DELAY_1MS ; delay for 1 ms
   MOV DX, PORTB ; set port of LCD control lines (PORTB)
   MOV AL, 00H ; E=0, RS=0
   OUT DX, AL ; write data in AL to PORTB
   POP AX ; restore value of AL
RET

DATA_CTRL:
   PUSH AX ; preserve value of AL
   MOV DX, PORTA ; set port of LCD data bus (PORTA)
   OUT DX, AL ; write data in AL to PORTA
   MOV DX, PORTB ; set port of LCD control lines (PORTB)
   MOV AL, 03H ; E=1, RS=1 (access data register)
   OUT DX, AL ; write data in AL to PORTB
   CALL DELAY_1MS ; delay for 1 ms
   MOV DX, PORTB ; set port of LCD control lines (PORTB)
   MOV AL, 01H ; E=0, RS=1
   OUT DX, AL ; write data in AL to PORTB
   POP AX ; restore value of AL
RET

INIT_LCD:
   MOV AL, 38H ; 8-bit interface, dual-line display
   CALL INST_CTRL ; write instruction to LCD
   MOV AL, 08H ; display off, cursor off, blink off
   CALL INST_CTRL ; write instruction to LCD
   MOV AL, 01H ; clear display
   CALL INST_CTRL ; write instruction to LCD
   MOV AL, 06H ; increment cursor, display shift off
   CALL INST_CTRL ; write instruction to LCD
   MOV AL, 0CH ; display on, cursor off, blink off
   CALL INST_CTRL ; write instruction to LCD
RET

DELAY_1MS:
   MOV BX, 02CAH
L1:
   DEC BX
   NOP
   JNZ L1
   RET
RET

EXIT:
CODE ENDS 
END START